#STOP WATCH PROGRAM

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout
from PyQt5.QtCore import QTimer, Qt

class Stopwatch(QWidget):
    def __init__(self):
        super().__init__()
        self.elapsed_time = 0  # in milliseconds
        self.timer = QTimer(self)
        self.timer.setInterval(10)  # update every 10 ms

        # Widgets
        self.time_label = QLabel("00:00:00.00", self)
        self.start_button = QPushButton("Start", self)
        self.stop_button = QPushButton("Stop", self)
        self.reset_button = QPushButton("Reset", self)

        self.initUI()

    def initUI(self):
        self.setWindowTitle("Stopwatch")
        self.setFixedSize(880, 300)

        # Layouts
        vbox = QVBoxLayout()
        hbox = QHBoxLayout()

        vbox.addWidget(self.time_label, alignment=Qt.AlignCenter)
        hbox.addWidget(self.start_button)
        hbox.addWidget(self.stop_button)
        hbox.addWidget(self.reset_button)
        vbox.addLayout(hbox)

        self.setLayout(vbox)

        # Style
        self.setStyleSheet("""
            QPushButton, QLabel {
                padding: 20px;
                font-weight: bold;
                font-family: Calibre;
            }
            QPushButton {
                font-size: 50px;
            }
            QLabel {
                font-size: 120px;
                background-color: hsl(200, 100%, 80%);
                border-radius: 20px;
            }
        """)

        # Connections
        self.start_button.clicked.connect(self.start)
        self.stop_button.clicked.connect(self.stop)
        self.reset_button.clicked.connect(self.reset)
        self.timer.timeout.connect(self.update_display)

    def start(self):
        if not self.timer.isActive():
            self.timer.start()

    def stop(self):
        self.timer.stop()

    def reset(self):
        self.timer.stop()
        self.elapsed_time = 0
        self.time_label.setText("00:00:00.00")

    def update_display(self):
        self.elapsed_time += 10
        hours = self.elapsed_time // (1000 * 60 * 60)
        minutes = (self.elapsed_time // (1000 * 60)) % 60
        seconds = (self.elapsed_time // 1000) % 60
        milliseconds = (self.elapsed_time % 1000) // 10
        self.time_label.setText(f"{hours:02}:{minutes:02}:{seconds:02}.{milliseconds:02}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    stopwatch = Stopwatch()
    stopwatch.show()
    sys.exit(app.exec_())